rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- helpers ---
    function signedIn() { return request.auth != null; }
    function isOwner(userId) { return signedIn() && request.auth.uid == userId; }
    // Admin = there is a doc at admins/{uid}; you create/delete these manually in Console
    function isAdmin() {
      return signedIn() &&
             exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // --- admin registry ---
    match /admins/{uid} {
      // Let a user see ONLY their own admin doc (handy to check if they're admin); you can also set `allow read: if false;`
      allow read: if signedIn() && request.auth.uid == uid;
      // No client writes; youâ€™ll create/delete these docs manually
      allow write: if false;
    }

    // --- user profiles ---
    match /users/{userId} {
      // Basic schema guard; adjust fields as you add them
      function validProfile() {
        return
          !('password' in request.resource.data) &&
          request.resource.data.keys().hasOnly([
            'email','displayName','age','userType','isPublic','createdAt','updatedAt', 'profile'
          ]) &&
          (!('email' in request.resource.data) || request.resource.data.email is string) &&
          (!('displayName' in request.resource.data) || request.resource.data.displayName is string) &&
          (!('age' in request.resource.data) || (request.resource.data.age is int && request.resource.data.age >= 13 && request.resource.data.age <= 120)) &&
          // clients may NOT promote themselves to admin now; restrict to non-privileged types
          (!('userType' in request.resource.data) || request.resource.data.userType in ['user','staff']);
      }

      // Normal user can create their own profile
      allow create: if isOwner(userId) && validProfile();

      // Read: owner, or admin, or explicitly public profiles
      allow read: if isOwner(userId) || isAdmin() || (resource.data.isPublic == true);

      // Update/Delete: owner or admin.
      // If owner, userType must NOT change (immutable unless admin).
      allow update, delete:
        if (isOwner(userId) && validProfile() &&
            (!('userType' in request.resource.data) || request.resource.data.userType == resource.data.userType))
        || isAdmin();

      // All subcollections under a user (their own data like plans, settings, etc.)
      match /{coll}/{doc} {
        allow create, read, update, delete: if isOwner(userId) || isAdmin();
      }
    }
  }
}
